version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: chatgpt_orders
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Flask Backend API
  backend:
    build: ./backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/chatgpt_orders
      - REDIS_URL=redis://redis:6379/0
      - SELENIUM_HEADLESS=true
    volumes:
      - ./backend:/app
      - backend_screenshots:/app/screenshots
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build: ./backend
    command: celery -A celery_worker.celery worker --loglevel=info --concurrency=2
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/chatgpt_orders
      - REDIS_URL=redis://redis:6379/0
      - SELENIUM_HEADLESS=true
    volumes:
      - ./backend:/app
      - backend_screenshots:/app/screenshots
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery-beat:
    build: ./backend
    command: celery -A celery_worker.celery beat --loglevel=info
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/chatgpt_orders
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    restart: unless-stopped

  # Flower (Celery Monitoring)
  flower:
    build: ./backend
    command: celery -A celery_worker.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - FLASK_ENV=development
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  backend_screenshots:
